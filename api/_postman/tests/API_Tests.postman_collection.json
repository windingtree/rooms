{
	"info": {
		"_postman_id": "2aeff3c8-a426-4c8a-8e98-af626918a13d",
		"name": "API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f929344a-b7e6-46a4-b155-58e8b017c541",
            "exec": [
              "pm.test('ping status', function () {",
              "    pm.response.to.have.status(200)",
              "})",
              "",
              "pm.test('ping response', function () {",
              "    pm.response.to.have.body('OK')",
              "})",
              "",
              "// postman.setNextRequest('health end point')",
              ""
            ],
            "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/ping",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "29463674-dc0e-48ff-8f15-735bd0ef0869",
            "exec": [
              "pm.test('health status', function () {",
              "  pm.response.to.have.status(200)",
              "})",
              "",
              "pm.test('mongo status', function () {",
              "  const jsonData = pm.response.json()",
              "  pm.expect(jsonData.mongo).to.be.a('object')",
              "  pm.expect(jsonData.mongo.status).to.be.a('string')",
              "  pm.expect(jsonData.mongo.status).to.equal('up')",
              "})",
              "",
              "pm.test('mongo latency', function () {",
              "  const jsonData = pm.response.json()",
              "  pm.expect(jsonData.mongo).to.be.a('object')",
              "  pm.expect(jsonData.mongo.latency).to.be.a('string')",
              "})",
              "",
              "pm.test('app version', function () {",
              "  const jsonData = pm.response.json()",
              "  pm.expect(jsonData.app_version).to.be.a('string')",
              "})",
              "",
              "// postman.setNextRequest('should reset test data')",
              ""
            ],
            "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/health",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"health"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
